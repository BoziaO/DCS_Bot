const {
    SlashCommandBuilder,
    PermissionFlagsBits,
    EmbedBuilder,
} = require("discord.js");
const DailyChallengeConfig = require("../../models/DailyChallengeConfig");
const dailyChallengeScheduler = require("../../utils/challenges/dailyChallengeScheduler");

module.exports = {
    data: new SlashCommandBuilder()
        .setName("renew-dailychallenge")
        .setDescription("Rƒôcznie odnawia codzienne wyzwanie dla tego serwera.")
        .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),

    async execute(interaction) {
        await interaction.deferReply({ephemeral: true});

        try {
            const config = await DailyChallengeConfig.findOne({
                guildId: interaction.guild.id,
            });

            if (!config) {
                const noConfigEmbed = new EmbedBuilder()
                    .setTitle("‚ùå Brak konfiguracji")
                    .setDescription(
                        "Ten serwer nie ma skonfigurowanych codziennych wyzwa≈Ñ.\n\nU≈ºyj `/setup-dailychallenge` aby je skonfigurowaƒá."
                    )
                    .setColor("#e74c3c");

                return interaction.editReply({embeds: [noConfigEmbed]});
            }

            if (!config.enabled) {
                const disabledEmbed = new EmbedBuilder()
                    .setTitle("‚ùå Wyzwania wy≈ÇƒÖczone")
                    .setDescription(
                        "Codzienne wyzwania sƒÖ wy≈ÇƒÖczone dla tego serwera.\n\nU≈ºyj `/setup-dailychallenge` aby je w≈ÇƒÖczyƒá."
                    )
                    .setColor("#e74c3c");

                return interaction.editReply({embeds: [disabledEmbed]});
            }

            const channel = await interaction.client.channels
                .fetch(config.channelId)
                .catch(() => null);
            if (!channel) {
                const noChannelEmbed = new EmbedBuilder()
                    .setTitle("‚ùå Kana≈Ç nie istnieje")
                    .setDescription(
                        "Skonfigurowany kana≈Ç dla wyzwa≈Ñ nie istnieje.\n\nU≈ºyj `/setup-dailychallenge` aby skonfigurowaƒá nowy kana≈Ç."
                    )
                    .setColor("#e74c3c");

                return interaction.editReply({embeds: [noChannelEmbed]});
            }

            await dailyChallengeScheduler.manualRenewal(interaction.guild.id);

            const successEmbed = new EmbedBuilder()
                .setTitle("‚úÖ Wyzwanie odnowione")
                .setDescription(`Pomy≈õlnie wys≈Çano nowe wyzwanie na kana≈Ç ${channel}.`)
                .setColor("#2ecc71")
                .addFields([
                    {
                        name: "üìç Kana≈Ç",
                        value: `${channel}`,
                        inline: true,
                    },
                    {
                        name: "‚è∞ Czƒôstotliwo≈õƒá",
                        value: this.getFrequencyText(
                            config.renewalFrequency,
                            config.customHour
                        ),
                        inline: true,
                    },
                    {
                        name: "üïê Ostatnie odnowienie",
                        value: `<t:${Math.floor(Date.now() / 1000)}:R>`,
                        inline: true,
                    },
                ])
                .setFooter({
                    text: `Rƒôczne odnowienie ‚Ä¢ ${interaction.guild.name}`,
                    iconURL: interaction.guild.iconURL(),
                });

            await interaction.editReply({embeds: [successEmbed]});
        } catch (error) {
            console.error("B≈ÇƒÖd podczas rƒôcznego odnowienia wyzwania:", error);

            const errorEmbed = new EmbedBuilder()
                .setTitle("‚ùå B≈ÇƒÖd odnowienia")
                .setDescription(
                    "WystƒÖpi≈Ç b≈ÇƒÖd podczas odnowienia wyzwania. Spr√≥buj ponownie p√≥≈∫niej."
                )
                .setColor("#e74c3c")
                .addFields([
                    {
                        name: "üîç Szczeg√≥≈Çy b≈Çƒôdu",
                        value: `\`\`\`${error.message}\`\`\``,
                        inline: false,
                    },
                ]);

            await interaction.editReply({embeds: [errorEmbed]});
        }
    },

    getFrequencyText(frequency, customHour = 8) {
        const frequencyTexts = {
            hourly: "Co godzinƒô",
            every3hours: "Co 3 godziny",
            every6hours: "Co 6 godzin",
            every12hours: "Co 12 godzin",
            daily: `Codziennie o ${customHour}:00`,
        };

        return frequencyTexts[frequency] || "Codziennie";
    },
};
